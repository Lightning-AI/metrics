name: Complex caching
description: some more complex caching - pip & conda & hf

inputs:
  python-version:
    description: Python version
    required: true
  requires:
    description: define oldest or latest
    required: false
    default: ""
  offset:
    description: some extra hash for pip cache
    required: false
    default: ""
  interval:
    description: cache hash reset interval in days
    required: false
    default: "7"

runs:
  using: "composite"
  steps:

  - name: install assitant's deps
    run: |
      pip install fire requests packaging
    shell: bash

  - name: Set min. dependencies
    if: inputs.requires == 'oldest'
    run: |
      python .github/assistant.py set-oldest-versions
      cat requirements.txt
    shell: bash

  # Note: This uses an internal pip API and may not always work
  # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
  - name: Determine caches
    id: cache_dirs
    run: |
      echo "pip_cache=$(pip cache dir)" >> $GITHUB_OUTPUT
      hf_cache=$(python -c "import os ; print(os.path.join(os.getcwd(), 'ci-cache_huggingface'))")
      echo "TRANSFORMERS_CACHE=$hf_cache" >> $GITHUB_ENV
    shell: bash

  - name: Cache pip
    continue-on-error: true
    uses: actions/cache@v3
    with:
      path: ${{ steps.cache_dirs.outputs.pip_cache }}
      key: ${{ runner.os }}-py${{ inputs.python-version }}-pip-${{ inputs.requires }}-${{ inputs.offset }}-${{ hashFiles('requirements.txt') }}
      restore-keys: ${{ runner.os }}-py${{ inputs.python-version }}-pip-${{ inputs.requires }}-${{ inputs.offset }}-

  - name: Cache HF
    continue-on-error: true
    uses: actions/cache@v3
    with:
      path: ${{ env.TRANSFORMERS_CACHE }}
      key: cache-transformers
      enableCrossOsArchive: true

  - name: Restored HF
    run: |
      mkdir -p $TRANSFORMERS_CACHE
      printf "list root:\n"
      ls -l .
      printf "list $TRANSFORMERS_CACHE:\n"
      ls -l $TRANSFORMERS_CACHE
    shell: bash
