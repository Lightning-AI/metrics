[metadata]
license_file = "LICENSE"
description-file = "README.md"

[build-system]
requires = [
    "setuptools",
    "wheel",
]


[tool.check-manifest]
ignore = [
    "*.yml",
    ".github",
    ".github/*"
]


[tool.pytest.ini_options]
norecursedirs = [
    ".git",
    ".github",
    "dist",
    "build",
    "docs",
]
addopts = [
    "--strict-markers",
    "--doctest-modules",
    "--doctest-plus",
    "--color=yes",
    "--disable-pytest-warnings",
]
# ToDo
#filterwarnings = ["error::FutureWarning"]
xfail_strict = true
junit_duration_report = "call"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "pass",
]

[tool.coverage.run]
parallel = true
concurrency = "thread"
relative_files = true


[tool.black]
# https://github.com/psf/black
line-length = 120
exclude = "(.eggs|.git|.hg|.mypy_cache|.venv|_build|buck-out|build|dist)"

[tool.isort]
known_first_party = [
    "torchmetrics",
    "integrations",
    "unittests",
    "integrations",
]
skip_glob = []
profile = "black"
line_length = 120


[tool.ruff]
line-length = 120
# Enable Pyflakes `E` and `F` codes by default.
select = [
    "E", "W",  # see: https://pypi.org/project/pycodestyle
    "F",  # see: https://pypi.org/project/pyflakes
    "D",  # see: https://pypi.org/project/pydocstyle
    "N",  # see: https://pypi.org/project/pep8-naming
]
extend-select = [
    "C4",  # see: https://pypi.org/project/flake8-comprehensions
    "PT",  # see: https://pypi.org/project/flake8-pytest-style
#    "RET",  # see: https://pypi.org/project/flake8-return
    "SIM",  # see: https://pypi.org/project/flake8-simplify
]
ignore = [
    "E731",  # Do not assign a lambda expression, use a def
    "F401",  # Imports of __all__
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in `__init__`
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "docs"
]
ignore-init-module-imports = true
unfixable = ["F401"]

[tool.ruff.per-file-ignores]
"setup.py" = ["D100", "SIM115"]
"__about__.py" = ["D100"]
"__init__.py" = ["D100"]
"src/**" = [
    "D103",  # todo # Missing docstring in public function
    "D205",  # todo # 1 blank line required between summary line and description
    "D401",  # todo # First line of docstring should be in imperative mood: ...
]
"tests/**" = [
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D401",  # todo # First line of docstring should be in imperative mood: ...
    "D415",  # todo # First line should end with a period, question mark, or exclamation point"
]

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

#[tool.ruff.pycodestyle]
#ignore-overlong-task-comments = true

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.mypy]
files = [
    "src/torchmetrics",
]
install_types = "True"
non_interactive = "True"
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
show_error_codes = "True"
warn_redundant_casts = "True"
warn_unused_configs = "True"
warn_unused_ignores = "True"
allow_redefinition = "True"
# disable this rule as the Trainer attributes are defined in the connectors, not in its __init__
disable_error_code = "attr-defined"
# style choices
warn_no_return = "False"

# Ignore mypy errors for these files
# TODO: the goal is for this to be empty
[[tool.mypy.overrides]]
# the list can be generated with:
# mypy --no-error-summary 2>&1 | tr ':' ' ' | awk '{print $1}' | sort | uniq | sed 's/\.py//g; s|src/||g;  s|\/|\.|g' | xargs -I {} echo '"{}",'
module = [
    "torchmetrics.aggregation",
    "torchmetrics.classification.accuracy",
    "torchmetrics.classification.auroc",
    "torchmetrics.classification.average_precision",
    "torchmetrics.classification.binned_precision_recall",
    "torchmetrics.classification.calibration_error",
    "torchmetrics.classification.cohen_kappa",
    "torchmetrics.classification.confusion_matrix",
    "torchmetrics.classification.exact_match",
    "torchmetrics.classification.f_beta",
    "torchmetrics.classification.hamming",
    "torchmetrics.classification.hinge",
    "torchmetrics.classification.jaccard",
    "torchmetrics.classification.matthews_corrcoef",
    "torchmetrics.classification.precision_recall_curve",
    "torchmetrics.classification.precision_recall",
    "torchmetrics.classification.ranking",
    "torchmetrics.classification.recall_at_fixed_precision",
    "torchmetrics.classification.roc",
    "torchmetrics.classification.specificity",
    "torchmetrics.classification.stat_scores",
    "torchmetrics.collections",
    "torchmetrics.detection.mean_ap",
    "torchmetrics.functional.audio.pit",
    "torchmetrics.functional.classification.auroc",
    "torchmetrics.functional.classification.average_precision",
    "torchmetrics.functional.classification.calibration_error",
    "torchmetrics.functional.classification.confusion_matrix",
    "torchmetrics.functional.classification.f_beta",
    "torchmetrics.functional.classification.precision_recall_curve",
    "torchmetrics.functional.classification.ranking",
    "torchmetrics.functional.classification.recall_at_fixed_precision",
    "torchmetrics.functional.classification.roc",
    "torchmetrics.functional.classification.stat_scores",
    "torchmetrics.functional.image.helper",
    "torchmetrics.functional.image.psnr",
    "torchmetrics.functional.image.ssim",
    "torchmetrics.functional.image.uqi",
    "torchmetrics.functional.regression.cosine_similarity",
    "torchmetrics.functional.regression.explained_variance",
    "torchmetrics.functional.regression.kl_divergence",
    "torchmetrics.functional.regression.r2",
    "torchmetrics.functional.regression.wmape",
    "torchmetrics.functional.retrieval.r_precision",
    "torchmetrics.functional.text.squad",
    "torchmetrics.image.fid",
    "torchmetrics.image.inception",
    "torchmetrics.image.lpip",
    "torchmetrics.image.psnr",
    "torchmetrics.image.ssim",
    "torchmetrics.image.tv",
    "torchmetrics.image.uqi",
    "torchmetrics.metric",
    "torchmetrics.regression.kl_divergence",
    "torchmetrics.regression.log_mse",
    "torchmetrics.regression.mae",
    "torchmetrics.regression.mape",
    "torchmetrics.regression.mse",
    "torchmetrics.regression.symmetric_mape",
    "torchmetrics.retrieval.precision_recall_curve",
    "torchmetrics.text.cer",
    "torchmetrics.text.mer",
    "torchmetrics.text.wer",
    "torchmetrics.utilities.checks",
    "torchmetrics.utilities.data",
    "torchmetrics.wrappers.tracker",
]
ignore_errors = "True"
